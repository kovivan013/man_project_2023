from aiogram.types import (
    KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
)
from typing import Union
from dataclasses import dataclass
import datetime


def default_reply_keyboard(one_time_keyboard: bool = True,
                           resize_keyboard: bool = True,
                           row_width: int = 2):
    return ReplyKeyboardMarkup(
        one_time_keyboard=one_time_keyboard,
        resize_keyboard=resize_keyboard,
        row_width=row_width
    )


def default_inline_keyboard(row_width: int = 2):
    return InlineKeyboardMarkup(
        row_width=row_width
    )


@dataclass(frozen=True)
class YesOrNo:

    yes: str = f"‚úÖ –¢–∞–∫"
    no: str = f"‚ùå –ù—ñ"
    cancel: str = f"üõë –°–∫–∞—Å—É–≤–∞—Ç–∏"
    skip: str = f"‚ñ∂‚ñ∂ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"
    save: str = f"üìÅ –ó–±–µ—Ä–µ–≥—Ç–∏"
    next: str = "–î–∞–ª—ñ ‚Ü™Ô∏è"

    yes_callback: str = f"yes_callback"
    no_callback: str = f"no_callback"
    cancel_callback: str = f"cancel_callback"
    skip_callback: str = f"skip_callback"
    save_callback: str = f"save_callback"
    next_callback: str = "next_callback"

    @classmethod
    def keyboard(cls, is_inline_keyboard: bool = False):

        reply_keyboard = default_reply_keyboard()
        inline_keyboard = default_inline_keyboard()

        yes_data: dict = {
            "text": cls.yes,
            "callback_data": cls.yes_callback
        }

        no_data: dict = {
            "text": cls.no,
            "callback_data": cls.no_callback
        }

        if is_inline_keyboard:
            inline_keyboard.add(
                InlineKeyboardButton(**yes_data),
                InlineKeyboardButton(**no_data)
            )

            return inline_keyboard

        reply_keyboard.add(
            KeyboardButton(**yes_data),
            KeyboardButton(**no_data)
        )

        return reply_keyboard

    @classmethod
    def cancel_keyboard(cls, is_inline_keyboard: bool = False):

        reply_keyboard = default_reply_keyboard()
        inline_keyboard = default_inline_keyboard()

        cancel_data: dict = {
            "text": cls.cancel,
            "callback_data": cls.cancel_callback
        }

        if is_inline_keyboard:
            inline_keyboard.add(
                InlineKeyboardButton(**cancel_data)
            )

            return inline_keyboard

        reply_keyboard.add(
            KeyboardButton(**cancel_data)
        )

        return reply_keyboard

    @classmethod
    def skip_keyboard(cls, is_inline_keyboard: bool = False):

        reply_keyboard = default_reply_keyboard()
        inline_keyboard = default_inline_keyboard()

        skip_data: dict = {
            "text": cls.skip,
            "callback_data": cls.skip_callback
        }

        if is_inline_keyboard:
            inline_keyboard.add(
                InlineKeyboardButton(**skip_data)
            )

            return inline_keyboard

        reply_keyboard.add(
            KeyboardButton(**skip_data)
        )

        return reply_keyboard


@dataclass(frozen=True)
class Controls:
    # TODO: Controls Menu Param types: [LIST, DICT, TUPLE]

    forward: str = f"–í–ø–µ—Ä–µ–¥ ‚ñ∂"
    backward: str = f"‚óÄ –ù–∞–∑–∞–¥"
    close: str = f"–ó–∞—á–∏–Ω–∏—Ç–∏ ‚úñ"

    short_forward: str = f"‚ñ∂"
    short_backward: str = f"‚óÄ"

    forward_callback: str = f"forward_control_callback"
    backward_callback: str = f"backward_control_callback"
    close_callback: str = f"close_control_callback"


@dataclass(frozen=True)
class Filters:

    dashboard_callback: str = f"dashboard_filter_callback"

    @classmethod
    def dashboard_filter(cls) -> Union[InlineKeyboardMarkup]:
        keyboard = default_inline_keyboard(row_width=1)

        by_active: str = "–ê–∫—Ç–∏–≤–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (0) ‚ñº"

        keyboard.add(
            InlineKeyboardButton(text=by_active,
                                 callback_data=cls.dashboard_callback)
        )

        return keyboard


@dataclass(frozen=True)
class DropdownMenu:
    # –±—É–¥–µ—Ç 3 –≤–∏–¥–∞ –≤–∏–¥–∞ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ (active option —Å –≥–∞–ª–æ—á–∫–æ–π)
    #
    # —Ç–∞–∫–æ–≥–æ –∂–µ —Ç–∏–ø–∞ —Å –≥–∞–ª–æ—á–∫–æ–π, –Ω–æ –¥–ª—è –º–µ–Ω—é –±–µ–∑ –ø–æ–∫–∞–∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
    #
    # —Ä–µ–∂–∏–º select (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ–≥–æ-—Ç–æ –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)

    # TODO: –í–æ–∑–º–æ–∂–Ω–æ —É–±–µ—Ä—É, –ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è + –ù–∞ –ø–∫ - –ª—É—á—à–µ –∫–∞–∫ —Å–µ–π—á–∞—Å, –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Ç–∞–∫ –∏ —Ç–∞–∫

    filters_sign: str = f"–û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä ‚úÖ"
    menu_sign: str = f"–û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –º–µ–Ω—é üíª"
    select_sign: str = f"–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ üîë"

    callback_data: str = f"none"

    @classmethod
    def placeholder_menu(cls, current_menu: dict):
        keyboard = default_inline_keyboard(row_width=2)

        keyboard.add(
            InlineKeyboardButton(text=f"‚Ü© –ù–∞ –≥–æ–ª–æ–≤–Ω—É",
                                 callback_data="change_mode"),
            InlineKeyboardButton(text=f"–†–µ–∂–∏–º üî¶",
                                 callback_data="change_mode"),
            InlineKeyboardButton(**current_menu)
        )

        return keyboard

    @classmethod
    def menu_keyboard(cls, buttons: list) -> Union[InlineKeyboardMarkup]:
        keyboard = default_inline_keyboard(row_width=2)

        # keyboard.add(
        #     InlineKeyboardButton(text=cls.menu_sign,
        #                          callback_data=cls.callback_data)
        # )

        for i in buttons:
            for data in i:
                keyboard.insert(
                    InlineKeyboardButton(**data)
                )

        return {"inline_keyboard": buttons}

# TODO: –ù—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ 2 –∫–ª–∞—Å—Å–∞ –ø–æ—Ç–µ—Ä—è–≤—à–µ–≥–æ –∏ –Ω–∞—à–µ–¥—à–µ–≥–æ, –±—É–¥—É —Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏
@dataclass(frozen=True)
class Navigation:

    # general buttons
    settings: str = f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚öôÔ∏è"
    profile: str = f"–ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å üë§"
    gigs: str = f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è üóûÔ∏è"

    #finder buttons
    dashboard: str = f"–ü–∞–Ω–µ–ª—å –î–µ—Ç–µ–∫—Ç–∏–≤–∞ üî¶"

    # seeker buttons
    marketplace: str = f"–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å üîé"

    @classmethod
    def finder_keyboard(cls) -> Union[ReplyKeyboardMarkup]:
        reply_keyboard = default_reply_keyboard(row_width=2, one_time_keyboard=False)

        reply_keyboard.add(
            KeyboardButton(text=cls.dashboard),
            KeyboardButton(text=cls.profile),
            KeyboardButton(text=cls.gigs),
            KeyboardButton(text=cls.settings)
        )

        return reply_keyboard

    @classmethod
    def seeker_keyboard(cls) -> Union[ReplyKeyboardMarkup]:
        pass


class MyProfile:

    def __init__(self):
        self.info_about: str = f"–ü—Ä–æ —Å–µ–±–µ üîì"
        self.gigs: str = f"–ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è üì∞"

        self.info_about_callback: str = f"info_about_callback"
        self.gigs_callback: str = f"gigs_callback"


    update: str = f"üñä –ó–º—ñ–Ω–∏—Ç–∏"
    share: str = f"üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è"

    update_callback: str = f"üñä –ó–º—ñ–Ω–∏—Ç–∏"
    share_callback: str = f"üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è"

    @classmethod
    def info_about_keyboard(cls) -> Union[InlineKeyboardMarkup]:
        keyboard = default_inline_keyboard(row_width=1)

        keyboard.add(
            InlineKeyboardButton(text=cls.update,
                                 callback_data=cls.update_callback),
            InlineKeyboardButton(text=cls.share,
                                 callback_data=cls.share_callback)
        )

        return keyboard


class UpdateProfile(Controls, YesOrNo):

    def __init__(self):
        self.username: str = f"‚úèÔ∏è –ù—ñ–∫–Ω–µ–π–º"
        self.description: str = f"üìù –û–ø–∏—Å"

        self.username_callback: str = f"username_callback"
        self.description_callback: str = f"description_callback"

    @classmethod
    def keyboard(cls) -> Union[InlineKeyboardMarkup]:
        keyboard = default_inline_keyboard(row_width=1)

        keyboard.add(
            InlineKeyboardButton(text=cls.backward,
                                 callback_data=cls.backward_callback)
        )

        return keyboard

    @classmethod
    def base_keyboard(cls, with_save: bool = True) -> Union[InlineKeyboardMarkup]:
        keyboard = default_inline_keyboard()

        keyboard.add(
            InlineKeyboardButton(text=cls.backward,
                                 callback_data=cls.backward_callback)
        )
        if with_save:
            keyboard.insert(
                InlineKeyboardButton(text=cls.save,
                                     callback_data=cls.save_callback)
            )

        return keyboard

class CreateGigMenu(YesOrNo):

    @classmethod
    def keyboard(cls, with_next: bool = False, with_skip: bool = False):
        keyboard = default_inline_keyboard(row_width=3)

        keyboard.add(
            InlineKeyboardButton(text=cls.cancel,
                                 callback_data=cls.cancel_callback)
        )
        if with_next:
            keyboard.insert(
                InlineKeyboardButton(text=cls.next,
                                     callback_data=cls.next_callback)
            )
        if with_skip:
            keyboard.insert(
                InlineKeyboardButton(text=cls.skip,
                                     callback_data=cls.skip_callback)
            )

        return keyboard


class CalendarMenu(Controls, YesOrNo):

    short_days: list = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–ù–î"]
    days: list = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]
    months: dict = {1: {"month": "–°—ñ—á–µ–Ω—å", "days": 31}, 2: {"month": "–õ—é—Ç–∏–π", "days": 28},
                    3: {"month": "–ë–µ—Ä–µ–∑–µ–Ω—å", "days": 31}, 4: {"month": "–ö–≤—ñ—Ç–µ–Ω—å", "days": 30},
                    5: {"month": "–¢—Ä–∞–≤–µ–Ω—å", "days": 31}, 6: {"month": "–ß–µ—Ä–≤–µ–Ω—å", "days": 30},
                    7: {"month": "–õ–∏–ø–µ–Ω—å", "days": 31}, 8: {"month": "–°–µ—Ä–ø–µ–Ω—å", "days": 31},
                    9: {"month": "–í–µ—Ä–µ—Å–µ–Ω—å", "days": 30}, 10: {"month": "–ñ–æ–≤—Ç–µ–Ω—å", "days": 31},
                    11: {"month": "–õ–∏—Å—Ç–æ–ø–∞–¥", "days": 30}, 12: {"month": "–ì—Ä—É–¥–µ–Ω—å", "days": 31}
    }

    now: str = f"üóìÔ∏è –ó–∞—Ä–∞–∑"

    date_callback: str = f"_date_callback"

    @classmethod
    def keyboard(cls, with_cancel: bool = False, with_save: bool = False, with_forward: bool = True,
                 year: int = None, month: int = None, day: int = None) -> Union[InlineKeyboardMarkup]:
        keyboard = default_inline_keyboard(row_width=7)

        args = all([year, month, day])

        if args:
            today = datetime.datetime(year, month, day)
        else:
            today = datetime.datetime.now()

        now = datetime.datetime.now()
        firts_month_day = datetime.datetime(today.year, today.month, 1)
        weekday = firts_month_day.weekday()
        days_to_end = 7 - weekday
        days_in_month = cls.months[today.month]["days"]

        day = 1

        if today.year % 4 == 0 and today.month == 2:
            days_in_month = 29

        r = 6

        if days_in_month - days_to_end - 28 > 0:
            r+=1

        keyboard.add(
            InlineKeyboardButton(text=f"{cls.months[today.month]['month']}, {today.year}",
                                 callback_data="None")
        )

        keyboard.add(
            InlineKeyboardButton(text=cls.short_backward,
                                 callback_data=cls.backward_callback)
        )

        if with_forward:
            keyboard.insert(
                InlineKeyboardButton(text=cls.short_forward,
                                     callback_data=cls.forward_callback)
            )

        days = []
        for short_day in cls.short_days:
            days.append(
                InlineKeyboardButton(
                    text=short_day,
                    callback_data="None"
                )
            )

        keyboard.row(*days)

        for i in range(1, r):
            for j in range(1, 8):
                if day > days_in_month or (i<2 and j < weekday + 1):
                    keyboard.insert(
                        InlineKeyboardButton(
                            text=" ",
                            callback_data="None"
                        )
                    )
                    continue
                callback = int(datetime.datetime(today.year,
                                                 today.month,
                                                 day).timestamp())
                keyboard.insert(
                    InlineKeyboardButton(
                        text=f"{day}",
                        callback_data=f"{callback}{cls.date_callback}"
                    )
                )
                day += 1

        keyboard.add(
            InlineKeyboardButton(text=cls.now,
                                 callback_data=f"now{cls.date_callback}"
            )
        )

        if with_cancel:
            keyboard.add(
                InlineKeyboardButton(text=cls.cancel,
                                     callback_data=cls.cancel_callback)
            )
            if with_save:
                keyboard.insert(
                    InlineKeyboardButton(text=cls.next,
                                         callback_data=cls.next_callback)
                )


        return keyboard

